<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch" xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
					http://www.springframework.org/schema/batch
	                http://www.springframework.org/schema/batch/spring-batch-2.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">


  <beans:import resource="applicationContext.xml" />

  <step id="abstractParentStep" abstract="true">
    <tasklet>
      <chunk commit-interval="10000">
      </chunk>
    </tasklet>
  </step>

  <!-- Tokenizer - Converts a delimited string into a Set of Fields -->
  <beans:bean name="defaultTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
    <beans:property name="delimiter">
      <util:constant static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB" />
    </beans:property>
    <beans:property name="quoteCharacter" value="\u0000" />
  </beans:bean>

  <!-- FieldSetMapper - Populates a bean's attributes with using the FieldSet -->
  <beans:bean name="geonameFieldSetMapper" class="com.mycompany.reader.GeonameFieldSetMapper" />

  <!-- LineMapper - Uses the tokenizer and Mapper to create instances of a Bean. -->
  <beans:bean name="geonameLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
    <beans:property name="lineTokenizer" ref="defaultTokenizer" />
    <beans:property name="fieldSetMapper" ref="geonameFieldSetMapper" />
  </beans:bean>

  <!-- Reader - used by the tasklet to process one Item from the input. -->
  <beans:bean name="geonameReader" class="org.springframework.batch.item.file.FlatFileItemReader">
    <beans:property name="encoding" value="UTF-8" />
    <beans:property name="lineMapper" ref="geonameLineMapper" />
    <beans:property name="resource" value="allCountries.txt" />
  </beans:bean>


  <beans:bean id="jobListener" class="com.mycompany.listener.JobListener" />

  <job id="geonameJob">
    <step id="step1" parent="abstractParentStep">
      <tasklet>
        <chunk reader="geonameReader" writer="geonamejdbcBatchWriter" />
      </tasklet>
      <end on="*" />
    </step>
    <listeners>
      <listener ref="jobListener" />
    </listeners>
  </job>

  <job id="esJob">
    <step id="step2" parent="abstractParentStep">
      <tasklet>
        <chunk reader="geonameReader" writer="geonameElasticIndexer" />
      </tasklet>
      <end on="*" />
    </step>
    <listeners>
      <listener ref="jobListener" />
    </listeners>
  </job>


  <beans:bean id="geonamejdbcBatchWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
    <beans:property name="dataSource" ref="dataSource" />
    <beans:property name="sql"
      value="insert into allCountries (geo_id,geo_name,geo_ansiname,geo_alternate_names,geo_latitude,geo_longitude,geo_feature_class,geo_feature_code,geo_country_code,geo_country_code2,geo_admin1_code,geo_admin2_code,geo_admin3_code,geo_admin4_code,geo_population,geo_elevation,geo_gtopo30,geo_timezone,geo_mod_date) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)" />
    <beans:property name="itemPreparedStatementSetter" ref="StatementSetter" />
  </beans:bean>

  <!-- To run the job from the command line type the following: mvn exec:java -Dexec.mainClass=org.springframework.batch.core.launch.support.CommandLineJobRunner 
    -Dexec.args="jobs2.xml Job" -->





</beans:beans>